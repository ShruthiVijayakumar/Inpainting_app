# -*- coding: utf-8 -*-
"""Inpainting_App.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ABlJWAzPowyWZ6191pqtxmRxeeaWKQ-B
"""

!pip install flask ngrok torch diffusers

!pip install pyngrok

!ngrok config add-authtoken 2lFNozVF68RnBQnGoEcWCOb6a5D_51JmRkTaJ9oXstxgdrYg5

import os
from flask import Flask, request, render_template_string, send_file
from diffusers import AutoPipelineForInpainting
from diffusers.utils import load_image
import torch
from PIL import Image
import requests
from io import BytesIO
from pyngrok import ngrok

# Initialize Flask app
app = Flask(__name__)

# Load the pipeline
pipeline = AutoPipelineForInpainting.from_pretrained(
    "kandinsky-community/kandinsky-2-2-decoder-inpaint", torch_dtype=torch.float16
)
pipeline.enable_model_cpu_offload()

# HTML template
html_template = """
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Image Inpainting Web App</title>
</head>
<body>
    <h1>Image Inpainting Web App</h1>
    <form method="POST">
        <label for="init_image">Initial Image URL:</label><br>
        <input type="text" id="init_image" name="init_image" required><br><br>

        <label for="prompt">Prompt:</label><br>
        <input type="text" id="prompt" name="prompt" required><br><br>

        <input type="submit" value="Generate Image">
    </form>
    {% if image_url %}
        <h2>Generated Image:</h2>
        <img src="{{ image_url }}" alt="Generated Image">
    {% endif %}
</body>
</html>
"""

@app.route("/", methods=["GET", "POST"])
def index():
    if request.method == "POST":
        # Get the form data
        init_image_url = request.form["init_image"]
        prompt = request.form["prompt"]

        # Load the initial and mask images
        init_image = load_image(init_image_url)
        mask_image_url = "https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/diffusers/inpaint_mask.png"
        mask_image = load_image(mask_image_url)

        # Generate the image
        generator = torch.Generator("cuda").manual_seed(92)
        image = pipeline(prompt=prompt, image=init_image, mask_image=mask_image, generator=generator).images[0]

        # Save the generated image to a BytesIO object
        img_io = BytesIO()
        image.save(img_io, "PNG")
        img_io.seek(0)

        # Save the image temporarily to serve it
        output_path = "/generated_image_01.png"
        image.save(output_path)

        return render_template_string(html_template, image_url=output_path)

    return render_template_string(html_template)

# Run the app
if __name__ == "__main__":
    # Create a public URL using ngrok
    public_url = ngrok.connect(5000)
    print(f" * ngrok URL: {public_url}")

    # Run Flask app
    app.run()